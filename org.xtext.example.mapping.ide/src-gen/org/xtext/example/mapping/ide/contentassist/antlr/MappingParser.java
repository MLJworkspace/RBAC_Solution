/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mapping.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mapping.ide.contentassist.antlr.internal.InternalMappingParser;
import org.xtext.example.mapping.services.MappingGrammarAccess;

public class MappingParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MappingGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MappingGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getMappingRuleAccess().getAlternatives_5_0(), "rule__MappingRule__Alternatives_5_0");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getMetamodelAccess().getAlternatives(), "rule__Metamodel__Alternatives");
			builder.put(grammarAccess.getValidIDAccess().getAlternatives(), "rule__ValidID__Alternatives");
			builder.put(grammarAccess.getKEYWORDAccess().getAlternatives(), "rule__KEYWORD__Alternatives");
			builder.put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
			builder.put(grammarAccess.getMappingModelAccess().getGroup(), "rule__MappingModel__Group__0");
			builder.put(grammarAccess.getMappingModelAccess().getGroup_5(), "rule__MappingModel__Group_5__0");
			builder.put(grammarAccess.getMappingModelAccess().getGroup_7(), "rule__MappingModel__Group_7__0");
			builder.put(grammarAccess.getMappingModelAccess().getGroup_11(), "rule__MappingModel__Group_11__0");
			builder.put(grammarAccess.getMappingModelAccess().getGroup_13(), "rule__MappingModel__Group_13__0");
			builder.put(grammarAccess.getMappingModelAccess().getGroup_13_3(), "rule__MappingModel__Group_13_3__0");
			builder.put(grammarAccess.getSourceMetamodelAccess().getGroup(), "rule__SourceMetamodel__Group__0");
			builder.put(grammarAccess.getTargetMetamodelAccess().getGroup(), "rule__TargetMetamodel__Group__0");
			builder.put(grammarAccess.getMappingRuleAccess().getGroup(), "rule__MappingRule__Group__0");
			builder.put(grammarAccess.getMappingRuleAccess().getGroup_4(), "rule__MappingRule__Group_4__0");
			builder.put(grammarAccess.getMappingRuleAccess().getGroup_5(), "rule__MappingRule__Group_5__0");
			builder.put(grammarAccess.getMappingRuleAccess().getGroup_5_0_0(), "rule__MappingRule__Group_5_0_0__0");
			builder.put(grammarAccess.getMappingRuleAccess().getGroup_5_1(), "rule__MappingRule__Group_5_1__0");
			builder.put(grammarAccess.getMappingRuleAccess().getGroup_6(), "rule__MappingRule__Group_6__0");
			builder.put(grammarAccess.getMappingRuleAccess().getGroup_7(), "rule__MappingRule__Group_7__0");
			builder.put(grammarAccess.getMappingRuleAccess().getGroup_8(), "rule__MappingRule__Group_8__0");
			builder.put(grammarAccess.getMappingRuleAccess().getGroup_9(), "rule__MappingRule__Group_9__0");
			builder.put(grammarAccess.getMappingRuleAccess().getGroup_10(), "rule__MappingRule__Group_10__0");
			builder.put(grammarAccess.getMappingRuleAccess().getGroup_10_2(), "rule__MappingRule__Group_10_2__0");
			builder.put(grammarAccess.getMappingRuleAccess().getGroup_11(), "rule__MappingRule__Group_11__0");
			builder.put(grammarAccess.getMappingRuleAccess().getGroup_11_2(), "rule__MappingRule__Group_11_2__0");
			builder.put(grammarAccess.getHelperStatementAccess().getGroup(), "rule__HelperStatement__Group__0");
			builder.put(grammarAccess.getHelperStatementAccess().getGroup_2(), "rule__HelperStatement__Group_2__0");
			builder.put(grammarAccess.getHelperStatementAccess().getGroup_3(), "rule__HelperStatement__Group_3__0");
			builder.put(grammarAccess.getHelperStatementAccess().getGroup_3_2(), "rule__HelperStatement__Group_3_2__0");
			builder.put(grammarAccess.getHelperStatementAccess().getGroup_4(), "rule__HelperStatement__Group_4__0");
			builder.put(grammarAccess.getHelperStatementAccess().getGroup_4_2(), "rule__HelperStatement__Group_4_2__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getVariableDeclarationAccess().getGroup(), "rule__VariableDeclaration__Group__0");
			builder.put(grammarAccess.getMappingModelAccess().getNameAssignment_1(), "rule__MappingModel__NameAssignment_1");
			builder.put(grammarAccess.getMappingModelAccess().getSourceMetamodelsAssignment_4(), "rule__MappingModel__SourceMetamodelsAssignment_4");
			builder.put(grammarAccess.getMappingModelAccess().getSourceMetamodelsAssignment_5_1(), "rule__MappingModel__SourceMetamodelsAssignment_5_1");
			builder.put(grammarAccess.getMappingModelAccess().getMainSourceMetamodelAssignment_7_1(), "rule__MappingModel__MainSourceMetamodelAssignment_7_1");
			builder.put(grammarAccess.getMappingModelAccess().getTargetMetamodelsAssignment_10(), "rule__MappingModel__TargetMetamodelsAssignment_10");
			builder.put(grammarAccess.getMappingModelAccess().getTargetMetamodelsAssignment_11_1(), "rule__MappingModel__TargetMetamodelsAssignment_11_1");
			builder.put(grammarAccess.getMappingModelAccess().getRulesAssignment_13_2(), "rule__MappingModel__RulesAssignment_13_2");
			builder.put(grammarAccess.getMappingModelAccess().getRulesAssignment_13_3_1(), "rule__MappingModel__RulesAssignment_13_3_1");
			builder.put(grammarAccess.getSourceMetamodelAccess().getNameAssignment_1(), "rule__SourceMetamodel__NameAssignment_1");
			builder.put(grammarAccess.getSourceMetamodelAccess().getModelAssignment_2(), "rule__SourceMetamodel__ModelAssignment_2");
			builder.put(grammarAccess.getTargetMetamodelAccess().getNameAssignment_1(), "rule__TargetMetamodel__NameAssignment_1");
			builder.put(grammarAccess.getTargetMetamodelAccess().getModelAssignment_2(), "rule__TargetMetamodel__ModelAssignment_2");
			builder.put(grammarAccess.getMappingRuleAccess().getNameAssignment_2(), "rule__MappingRule__NameAssignment_2");
			builder.put(grammarAccess.getMappingRuleAccess().getVarAssignment_3(), "rule__MappingRule__VarAssignment_3");
			builder.put(grammarAccess.getMappingRuleAccess().getIdentifierAssignment_4_1(), "rule__MappingRule__IdentifierAssignment_4_1");
			builder.put(grammarAccess.getMappingRuleAccess().getSourceAssignment_5_0_0_1(), "rule__MappingRule__SourceAssignment_5_0_0_1");
			builder.put(grammarAccess.getMappingRuleAccess().getVariableAssignment_5_0_1(), "rule__MappingRule__VariableAssignment_5_0_1");
			builder.put(grammarAccess.getMappingRuleAccess().getEEnumLiteralAssignment_5_1_1(), "rule__MappingRule__EEnumLiteralAssignment_5_1_1");
			builder.put(grammarAccess.getMappingRuleAccess().getTargetAssignment_6_1(), "rule__MappingRule__TargetAssignment_6_1");
			builder.put(grammarAccess.getMappingRuleAccess().getOperatorAssignment_7_1(), "rule__MappingRule__OperatorAssignment_7_1");
			builder.put(grammarAccess.getMappingRuleAccess().getConditionAssignment_8_1(), "rule__MappingRule__ConditionAssignment_8_1");
			builder.put(grammarAccess.getMappingRuleAccess().getCommentAssignment_9_1(), "rule__MappingRule__CommentAssignment_9_1");
			builder.put(grammarAccess.getMappingRuleAccess().getChildRulesAssignment_10_1(), "rule__MappingRule__ChildRulesAssignment_10_1");
			builder.put(grammarAccess.getMappingRuleAccess().getChildRulesAssignment_10_2_1(), "rule__MappingRule__ChildRulesAssignment_10_2_1");
			builder.put(grammarAccess.getMappingRuleAccess().getChildHelpersAssignment_11_1(), "rule__MappingRule__ChildHelpersAssignment_11_1");
			builder.put(grammarAccess.getMappingRuleAccess().getChildHelpersAssignment_11_2_1(), "rule__MappingRule__ChildHelpersAssignment_11_2_1");
			builder.put(grammarAccess.getHelperStatementAccess().getStatementAssignment_2_1(), "rule__HelperStatement__StatementAssignment_2_1");
			builder.put(grammarAccess.getHelperStatementAccess().getChildRulesAssignment_3_1(), "rule__HelperStatement__ChildRulesAssignment_3_1");
			builder.put(grammarAccess.getHelperStatementAccess().getChildRulesAssignment_3_2_1(), "rule__HelperStatement__ChildRulesAssignment_3_2_1");
			builder.put(grammarAccess.getHelperStatementAccess().getChildHelpersAssignment_4_1(), "rule__HelperStatement__ChildHelpersAssignment_4_1");
			builder.put(grammarAccess.getHelperStatementAccess().getChildHelpersAssignment_4_2_1(), "rule__HelperStatement__ChildHelpersAssignment_4_2_1");
			builder.put(grammarAccess.getVariableDeclarationAccess().getNameAssignment_2(), "rule__VariableDeclaration__NameAssignment_2");
			builder.put(grammarAccess.getVariableDeclarationAccess().getValueAssignment_3(), "rule__VariableDeclaration__ValueAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MappingGrammarAccess grammarAccess;

	@Override
	protected InternalMappingParser createParser() {
		InternalMappingParser result = new InternalMappingParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MappingGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MappingGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}

/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mapping.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mapping.services.MappingGrammarAccess;

@SuppressWarnings("all")
public class MappingSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MappingGrammarAccess grammarAccess;
	protected AbstractElementAlias match_HelperStatement_HelperStatementKeyword_1_q;
	protected AbstractElementAlias match_MappingRule_MappingRuleKeyword_1_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MappingGrammarAccess) access;
		match_HelperStatement_HelperStatementKeyword_1_q = new TokenAlias(false, true, grammarAccess.getHelperStatementAccess().getHelperStatementKeyword_1());
		match_MappingRule_MappingRuleKeyword_1_q = new TokenAlias(false, true, grammarAccess.getMappingRuleAccess().getMappingRuleKeyword_1());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_HelperStatement_HelperStatementKeyword_1_q.equals(syntax))
				emit_HelperStatement_HelperStatementKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MappingRule_MappingRuleKeyword_1_q.equals(syntax))
				emit_MappingRule_MappingRuleKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'HelperStatement'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'statement' statement=STRING
	 */
	protected void emit_HelperStatement_HelperStatementKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'MappingRule'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'comment' comment=EString
	 *     (rule start) (ambiguity) 'condition' condition=STRING
	 *     (rule start) (ambiguity) 'identifier' identifier=STRING
	 *     (rule start) (ambiguity) 'operator' operator=Operator
	 *     (rule start) (ambiguity) 'source' source=[EObject|QualifiedName]
	 *     (rule start) (ambiguity) 'target' target=[EObject|QualifiedName]
	 *     (rule start) (ambiguity) '{' ChildHelpers+=HelperStatement
	 *     (rule start) (ambiguity) '{' ChildRules+=MappingRule
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) name=STRING
	 *     (rule start) (ambiguity) var=VariableDeclaration
	 *     (rule start) (ambiguity) variable=[VariableDeclaration|ID]
	 */
	protected void emit_MappingRule_MappingRuleKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}

/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mapping.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mapping.mapping.HelperStatement;
import org.xtext.example.mapping.mapping.MappingModel;
import org.xtext.example.mapping.mapping.MappingPackage;
import org.xtext.example.mapping.mapping.MappingRule;
import org.xtext.example.mapping.mapping.SourceMetamodel;
import org.xtext.example.mapping.mapping.TargetMetamodel;
import org.xtext.example.mapping.mapping.VariableDeclaration;
import org.xtext.example.mapping.services.MappingGrammarAccess;

@SuppressWarnings("all")
public class MappingSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MappingGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MappingPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MappingPackage.HELPER_STATEMENT:
				sequence_HelperStatement(context, (HelperStatement) semanticObject); 
				return; 
			case MappingPackage.MAPPING_MODEL:
				sequence_MappingModel(context, (MappingModel) semanticObject); 
				return; 
			case MappingPackage.MAPPING_RULE:
				sequence_MappingRule(context, (MappingRule) semanticObject); 
				return; 
			case MappingPackage.SOURCE_METAMODEL:
				sequence_SourceMetamodel(context, (SourceMetamodel) semanticObject); 
				return; 
			case MappingPackage.TARGET_METAMODEL:
				sequence_TargetMetamodel(context, (TargetMetamodel) semanticObject); 
				return; 
			case MappingPackage.VARIABLE_DECLARATION:
				sequence_VariableDeclaration(context, (VariableDeclaration) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     HelperStatement returns HelperStatement
	 *
	 * Constraint:
	 *     (statement=STRING (ChildRules+=MappingRule ChildRules+=MappingRule*)? (ChildHelpers+=HelperStatement ChildHelpers+=HelperStatement*)?)
	 */
	protected void sequence_HelperStatement(ISerializationContext context, HelperStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MappingModel returns MappingModel
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         SourceMetamodels+=SourceMetamodel 
	 *         SourceMetamodels+=SourceMetamodel* 
	 *         MainSourceMetamodel=[SourceMetamodel|QualifiedName]? 
	 *         TargetMetamodels+=TargetMetamodel 
	 *         TargetMetamodels+=TargetMetamodel* 
	 *         (Rules+=MappingRule Rules+=MappingRule*)?
	 *     )
	 */
	protected void sequence_MappingModel(ISerializationContext context, MappingModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MappingRule returns MappingRule
	 *
	 * Constraint:
	 *     (
	 *         name=STRING? 
	 *         var=VariableDeclaration? 
	 *         identifier=STRING? 
	 *         ((source=[EObject|QualifiedName] | variable=[VariableDeclaration|ID]) EEnumLiteral=[EEnumLiteral|ID]?)? 
	 *         target=[EObject|QualifiedName]? 
	 *         operator=Operator? 
	 *         condition=STRING? 
	 *         comment=EString? 
	 *         (ChildRules+=MappingRule ChildRules+=MappingRule*)? 
	 *         (ChildHelpers+=HelperStatement ChildHelpers+=HelperStatement*)?
	 *     )
	 */
	protected void sequence_MappingRule(ISerializationContext context, MappingRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SourceMetamodel returns SourceMetamodel
	 *     Metamodel returns SourceMetamodel
	 *
	 * Constraint:
	 *     (name=STRING? model=[EPackage|EString])
	 */
	protected void sequence_SourceMetamodel(ISerializationContext context, SourceMetamodel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TargetMetamodel returns TargetMetamodel
	 *     Metamodel returns TargetMetamodel
	 *
	 * Constraint:
	 *     (name=STRING? model=[EPackage|EString])
	 */
	protected void sequence_TargetMetamodel(ISerializationContext context, TargetMetamodel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VariableDeclaration returns VariableDeclaration
	 *
	 * Constraint:
	 *     (name=ID value=STRING)
	 */
	protected void sequence_VariableDeclaration(ISerializationContext context, VariableDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MappingPackage.Literals.VARIABLE_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingPackage.Literals.VARIABLE_DECLARATION__NAME));
			if (transientValues.isValueTransient(semanticObject, MappingPackage.Literals.VARIABLE_DECLARATION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingPackage.Literals.VARIABLE_DECLARATION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getVariableDeclarationAccess().getValueSTRINGTerminalRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}

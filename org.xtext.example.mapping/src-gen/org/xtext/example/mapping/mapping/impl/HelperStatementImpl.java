/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mapping.mapping.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mapping.mapping.HelperStatement;
import org.xtext.example.mapping.mapping.MappingPackage;
import org.xtext.example.mapping.mapping.MappingRule;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Helper Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mapping.mapping.impl.HelperStatementImpl#getStatement <em>Statement</em>}</li>
 *   <li>{@link org.xtext.example.mapping.mapping.impl.HelperStatementImpl#getChildRules <em>Child Rules</em>}</li>
 *   <li>{@link org.xtext.example.mapping.mapping.impl.HelperStatementImpl#getChildHelpers <em>Child Helpers</em>}</li>
 * </ul>
 *
 * @generated
 */
public class HelperStatementImpl extends MinimalEObjectImpl.Container implements HelperStatement
{
  /**
   * The default value of the '{@link #getStatement() <em>Statement</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatement()
   * @generated
   * @ordered
   */
  protected static final String STATEMENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getStatement() <em>Statement</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatement()
   * @generated
   * @ordered
   */
  protected String statement = STATEMENT_EDEFAULT;

  /**
   * The cached value of the '{@link #getChildRules() <em>Child Rules</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChildRules()
   * @generated
   * @ordered
   */
  protected EList<MappingRule> childRules;

  /**
   * The cached value of the '{@link #getChildHelpers() <em>Child Helpers</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChildHelpers()
   * @generated
   * @ordered
   */
  protected EList<HelperStatement> childHelpers;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected HelperStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MappingPackage.Literals.HELPER_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getStatement()
  {
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStatement(String newStatement)
  {
    String oldStatement = statement;
    statement = newStatement;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingPackage.HELPER_STATEMENT__STATEMENT, oldStatement, statement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<MappingRule> getChildRules()
  {
    if (childRules == null)
    {
      childRules = new EObjectContainmentEList<MappingRule>(MappingRule.class, this, MappingPackage.HELPER_STATEMENT__CHILD_RULES);
    }
    return childRules;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<HelperStatement> getChildHelpers()
  {
    if (childHelpers == null)
    {
      childHelpers = new EObjectContainmentEList<HelperStatement>(HelperStatement.class, this, MappingPackage.HELPER_STATEMENT__CHILD_HELPERS);
    }
    return childHelpers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MappingPackage.HELPER_STATEMENT__CHILD_RULES:
        return ((InternalEList<?>)getChildRules()).basicRemove(otherEnd, msgs);
      case MappingPackage.HELPER_STATEMENT__CHILD_HELPERS:
        return ((InternalEList<?>)getChildHelpers()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MappingPackage.HELPER_STATEMENT__STATEMENT:
        return getStatement();
      case MappingPackage.HELPER_STATEMENT__CHILD_RULES:
        return getChildRules();
      case MappingPackage.HELPER_STATEMENT__CHILD_HELPERS:
        return getChildHelpers();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MappingPackage.HELPER_STATEMENT__STATEMENT:
        setStatement((String)newValue);
        return;
      case MappingPackage.HELPER_STATEMENT__CHILD_RULES:
        getChildRules().clear();
        getChildRules().addAll((Collection<? extends MappingRule>)newValue);
        return;
      case MappingPackage.HELPER_STATEMENT__CHILD_HELPERS:
        getChildHelpers().clear();
        getChildHelpers().addAll((Collection<? extends HelperStatement>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MappingPackage.HELPER_STATEMENT__STATEMENT:
        setStatement(STATEMENT_EDEFAULT);
        return;
      case MappingPackage.HELPER_STATEMENT__CHILD_RULES:
        getChildRules().clear();
        return;
      case MappingPackage.HELPER_STATEMENT__CHILD_HELPERS:
        getChildHelpers().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MappingPackage.HELPER_STATEMENT__STATEMENT:
        return STATEMENT_EDEFAULT == null ? statement != null : !STATEMENT_EDEFAULT.equals(statement);
      case MappingPackage.HELPER_STATEMENT__CHILD_RULES:
        return childRules != null && !childRules.isEmpty();
      case MappingPackage.HELPER_STATEMENT__CHILD_HELPERS:
        return childHelpers != null && !childHelpers.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (statement: ");
    result.append(statement);
    result.append(')');
    return result.toString();
  }

} //HelperStatementImpl

/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mapping.mapping.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnumLiteral;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mapping.mapping.HelperStatement;
import org.xtext.example.mapping.mapping.MappingPackage;
import org.xtext.example.mapping.mapping.MappingRule;
import org.xtext.example.mapping.mapping.Operator;
import org.xtext.example.mapping.mapping.VariableDeclaration;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mapping.mapping.impl.MappingRuleImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.mapping.mapping.impl.MappingRuleImpl#getVar <em>Var</em>}</li>
 *   <li>{@link org.xtext.example.mapping.mapping.impl.MappingRuleImpl#getIdentifier <em>Identifier</em>}</li>
 *   <li>{@link org.xtext.example.mapping.mapping.impl.MappingRuleImpl#getSource <em>Source</em>}</li>
 *   <li>{@link org.xtext.example.mapping.mapping.impl.MappingRuleImpl#getVariable <em>Variable</em>}</li>
 *   <li>{@link org.xtext.example.mapping.mapping.impl.MappingRuleImpl#getEEnumLiteral <em>EEnum Literal</em>}</li>
 *   <li>{@link org.xtext.example.mapping.mapping.impl.MappingRuleImpl#getTarget <em>Target</em>}</li>
 *   <li>{@link org.xtext.example.mapping.mapping.impl.MappingRuleImpl#getOperator <em>Operator</em>}</li>
 *   <li>{@link org.xtext.example.mapping.mapping.impl.MappingRuleImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link org.xtext.example.mapping.mapping.impl.MappingRuleImpl#getComment <em>Comment</em>}</li>
 *   <li>{@link org.xtext.example.mapping.mapping.impl.MappingRuleImpl#getChildRules <em>Child Rules</em>}</li>
 *   <li>{@link org.xtext.example.mapping.mapping.impl.MappingRuleImpl#getChildHelpers <em>Child Helpers</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MappingRuleImpl extends MinimalEObjectImpl.Container implements MappingRule
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getVar() <em>Var</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVar()
   * @generated
   * @ordered
   */
  protected VariableDeclaration var;

  /**
   * The default value of the '{@link #getIdentifier() <em>Identifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIdentifier()
   * @generated
   * @ordered
   */
  protected static final String IDENTIFIER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIdentifier() <em>Identifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIdentifier()
   * @generated
   * @ordered
   */
  protected String identifier = IDENTIFIER_EDEFAULT;

  /**
   * The cached value of the '{@link #getSource() <em>Source</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSource()
   * @generated
   * @ordered
   */
  protected EObject source;

  /**
   * The cached value of the '{@link #getVariable() <em>Variable</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable()
   * @generated
   * @ordered
   */
  protected VariableDeclaration variable;

  /**
   * The cached value of the '{@link #getEEnumLiteral() <em>EEnum Literal</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEEnumLiteral()
   * @generated
   * @ordered
   */
  protected EEnumLiteral eEnumLiteral;

  /**
   * The cached value of the '{@link #getTarget() <em>Target</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTarget()
   * @generated
   * @ordered
   */
  protected EObject target;

  /**
   * The default value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected static final Operator OPERATOR_EDEFAULT = Operator.ASSIGN;

  /**
   * The cached value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected Operator operator = OPERATOR_EDEFAULT;

  /**
   * The default value of the '{@link #getCondition() <em>Condition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected static final String CONDITION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected String condition = CONDITION_EDEFAULT;

  /**
   * The default value of the '{@link #getComment() <em>Comment</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComment()
   * @generated
   * @ordered
   */
  protected static final String COMMENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getComment() <em>Comment</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComment()
   * @generated
   * @ordered
   */
  protected String comment = COMMENT_EDEFAULT;

  /**
   * The cached value of the '{@link #getChildRules() <em>Child Rules</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChildRules()
   * @generated
   * @ordered
   */
  protected EList<MappingRule> childRules;

  /**
   * The cached value of the '{@link #getChildHelpers() <em>Child Helpers</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChildHelpers()
   * @generated
   * @ordered
   */
  protected EList<HelperStatement> childHelpers;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MappingRuleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MappingPackage.Literals.MAPPING_RULE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingPackage.MAPPING_RULE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDeclaration getVar()
  {
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVar(VariableDeclaration newVar, NotificationChain msgs)
  {
    VariableDeclaration oldVar = var;
    var = newVar;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MappingPackage.MAPPING_RULE__VAR, oldVar, newVar);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVar(VariableDeclaration newVar)
  {
    if (newVar != var)
    {
      NotificationChain msgs = null;
      if (var != null)
        msgs = ((InternalEObject)var).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MappingPackage.MAPPING_RULE__VAR, null, msgs);
      if (newVar != null)
        msgs = ((InternalEObject)newVar).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MappingPackage.MAPPING_RULE__VAR, null, msgs);
      msgs = basicSetVar(newVar, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingPackage.MAPPING_RULE__VAR, newVar, newVar));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getIdentifier()
  {
    return identifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIdentifier(String newIdentifier)
  {
    String oldIdentifier = identifier;
    identifier = newIdentifier;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingPackage.MAPPING_RULE__IDENTIFIER, oldIdentifier, identifier));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject getSource()
  {
    if (source != null && source.eIsProxy())
    {
      InternalEObject oldSource = (InternalEObject)source;
      source = eResolveProxy(oldSource);
      if (source != oldSource)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MappingPackage.MAPPING_RULE__SOURCE, oldSource, source));
      }
    }
    return source;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EObject basicGetSource()
  {
    return source;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSource(EObject newSource)
  {
    EObject oldSource = source;
    source = newSource;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingPackage.MAPPING_RULE__SOURCE, oldSource, source));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDeclaration getVariable()
  {
    if (variable != null && variable.eIsProxy())
    {
      InternalEObject oldVariable = (InternalEObject)variable;
      variable = (VariableDeclaration)eResolveProxy(oldVariable);
      if (variable != oldVariable)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MappingPackage.MAPPING_RULE__VARIABLE, oldVariable, variable));
      }
    }
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableDeclaration basicGetVariable()
  {
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVariable(VariableDeclaration newVariable)
  {
    VariableDeclaration oldVariable = variable;
    variable = newVariable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingPackage.MAPPING_RULE__VARIABLE, oldVariable, variable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnumLiteral getEEnumLiteral()
  {
    if (eEnumLiteral != null && eEnumLiteral.eIsProxy())
    {
      InternalEObject oldEEnumLiteral = (InternalEObject)eEnumLiteral;
      eEnumLiteral = (EEnumLiteral)eResolveProxy(oldEEnumLiteral);
      if (eEnumLiteral != oldEEnumLiteral)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MappingPackage.MAPPING_RULE__EENUM_LITERAL, oldEEnumLiteral, eEnumLiteral));
      }
    }
    return eEnumLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnumLiteral basicGetEEnumLiteral()
  {
    return eEnumLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEEnumLiteral(EEnumLiteral newEEnumLiteral)
  {
    EEnumLiteral oldEEnumLiteral = eEnumLiteral;
    eEnumLiteral = newEEnumLiteral;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingPackage.MAPPING_RULE__EENUM_LITERAL, oldEEnumLiteral, eEnumLiteral));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject getTarget()
  {
    if (target != null && target.eIsProxy())
    {
      InternalEObject oldTarget = (InternalEObject)target;
      target = eResolveProxy(oldTarget);
      if (target != oldTarget)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MappingPackage.MAPPING_RULE__TARGET, oldTarget, target));
      }
    }
    return target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EObject basicGetTarget()
  {
    return target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTarget(EObject newTarget)
  {
    EObject oldTarget = target;
    target = newTarget;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingPackage.MAPPING_RULE__TARGET, oldTarget, target));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operator getOperator()
  {
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOperator(Operator newOperator)
  {
    Operator oldOperator = operator;
    operator = newOperator == null ? OPERATOR_EDEFAULT : newOperator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingPackage.MAPPING_RULE__OPERATOR, oldOperator, operator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCondition(String newCondition)
  {
    String oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingPackage.MAPPING_RULE__CONDITION, oldCondition, condition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getComment()
  {
    return comment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComment(String newComment)
  {
    String oldComment = comment;
    comment = newComment;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingPackage.MAPPING_RULE__COMMENT, oldComment, comment));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<MappingRule> getChildRules()
  {
    if (childRules == null)
    {
      childRules = new EObjectContainmentEList<MappingRule>(MappingRule.class, this, MappingPackage.MAPPING_RULE__CHILD_RULES);
    }
    return childRules;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<HelperStatement> getChildHelpers()
  {
    if (childHelpers == null)
    {
      childHelpers = new EObjectContainmentEList<HelperStatement>(HelperStatement.class, this, MappingPackage.MAPPING_RULE__CHILD_HELPERS);
    }
    return childHelpers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MappingPackage.MAPPING_RULE__VAR:
        return basicSetVar(null, msgs);
      case MappingPackage.MAPPING_RULE__CHILD_RULES:
        return ((InternalEList<?>)getChildRules()).basicRemove(otherEnd, msgs);
      case MappingPackage.MAPPING_RULE__CHILD_HELPERS:
        return ((InternalEList<?>)getChildHelpers()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MappingPackage.MAPPING_RULE__NAME:
        return getName();
      case MappingPackage.MAPPING_RULE__VAR:
        return getVar();
      case MappingPackage.MAPPING_RULE__IDENTIFIER:
        return getIdentifier();
      case MappingPackage.MAPPING_RULE__SOURCE:
        if (resolve) return getSource();
        return basicGetSource();
      case MappingPackage.MAPPING_RULE__VARIABLE:
        if (resolve) return getVariable();
        return basicGetVariable();
      case MappingPackage.MAPPING_RULE__EENUM_LITERAL:
        if (resolve) return getEEnumLiteral();
        return basicGetEEnumLiteral();
      case MappingPackage.MAPPING_RULE__TARGET:
        if (resolve) return getTarget();
        return basicGetTarget();
      case MappingPackage.MAPPING_RULE__OPERATOR:
        return getOperator();
      case MappingPackage.MAPPING_RULE__CONDITION:
        return getCondition();
      case MappingPackage.MAPPING_RULE__COMMENT:
        return getComment();
      case MappingPackage.MAPPING_RULE__CHILD_RULES:
        return getChildRules();
      case MappingPackage.MAPPING_RULE__CHILD_HELPERS:
        return getChildHelpers();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MappingPackage.MAPPING_RULE__NAME:
        setName((String)newValue);
        return;
      case MappingPackage.MAPPING_RULE__VAR:
        setVar((VariableDeclaration)newValue);
        return;
      case MappingPackage.MAPPING_RULE__IDENTIFIER:
        setIdentifier((String)newValue);
        return;
      case MappingPackage.MAPPING_RULE__SOURCE:
        setSource((EObject)newValue);
        return;
      case MappingPackage.MAPPING_RULE__VARIABLE:
        setVariable((VariableDeclaration)newValue);
        return;
      case MappingPackage.MAPPING_RULE__EENUM_LITERAL:
        setEEnumLiteral((EEnumLiteral)newValue);
        return;
      case MappingPackage.MAPPING_RULE__TARGET:
        setTarget((EObject)newValue);
        return;
      case MappingPackage.MAPPING_RULE__OPERATOR:
        setOperator((Operator)newValue);
        return;
      case MappingPackage.MAPPING_RULE__CONDITION:
        setCondition((String)newValue);
        return;
      case MappingPackage.MAPPING_RULE__COMMENT:
        setComment((String)newValue);
        return;
      case MappingPackage.MAPPING_RULE__CHILD_RULES:
        getChildRules().clear();
        getChildRules().addAll((Collection<? extends MappingRule>)newValue);
        return;
      case MappingPackage.MAPPING_RULE__CHILD_HELPERS:
        getChildHelpers().clear();
        getChildHelpers().addAll((Collection<? extends HelperStatement>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MappingPackage.MAPPING_RULE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case MappingPackage.MAPPING_RULE__VAR:
        setVar((VariableDeclaration)null);
        return;
      case MappingPackage.MAPPING_RULE__IDENTIFIER:
        setIdentifier(IDENTIFIER_EDEFAULT);
        return;
      case MappingPackage.MAPPING_RULE__SOURCE:
        setSource((EObject)null);
        return;
      case MappingPackage.MAPPING_RULE__VARIABLE:
        setVariable((VariableDeclaration)null);
        return;
      case MappingPackage.MAPPING_RULE__EENUM_LITERAL:
        setEEnumLiteral((EEnumLiteral)null);
        return;
      case MappingPackage.MAPPING_RULE__TARGET:
        setTarget((EObject)null);
        return;
      case MappingPackage.MAPPING_RULE__OPERATOR:
        setOperator(OPERATOR_EDEFAULT);
        return;
      case MappingPackage.MAPPING_RULE__CONDITION:
        setCondition(CONDITION_EDEFAULT);
        return;
      case MappingPackage.MAPPING_RULE__COMMENT:
        setComment(COMMENT_EDEFAULT);
        return;
      case MappingPackage.MAPPING_RULE__CHILD_RULES:
        getChildRules().clear();
        return;
      case MappingPackage.MAPPING_RULE__CHILD_HELPERS:
        getChildHelpers().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MappingPackage.MAPPING_RULE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case MappingPackage.MAPPING_RULE__VAR:
        return var != null;
      case MappingPackage.MAPPING_RULE__IDENTIFIER:
        return IDENTIFIER_EDEFAULT == null ? identifier != null : !IDENTIFIER_EDEFAULT.equals(identifier);
      case MappingPackage.MAPPING_RULE__SOURCE:
        return source != null;
      case MappingPackage.MAPPING_RULE__VARIABLE:
        return variable != null;
      case MappingPackage.MAPPING_RULE__EENUM_LITERAL:
        return eEnumLiteral != null;
      case MappingPackage.MAPPING_RULE__TARGET:
        return target != null;
      case MappingPackage.MAPPING_RULE__OPERATOR:
        return operator != OPERATOR_EDEFAULT;
      case MappingPackage.MAPPING_RULE__CONDITION:
        return CONDITION_EDEFAULT == null ? condition != null : !CONDITION_EDEFAULT.equals(condition);
      case MappingPackage.MAPPING_RULE__COMMENT:
        return COMMENT_EDEFAULT == null ? comment != null : !COMMENT_EDEFAULT.equals(comment);
      case MappingPackage.MAPPING_RULE__CHILD_RULES:
        return childRules != null && !childRules.isEmpty();
      case MappingPackage.MAPPING_RULE__CHILD_HELPERS:
        return childHelpers != null && !childHelpers.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", identifier: ");
    result.append(identifier);
    result.append(", operator: ");
    result.append(operator);
    result.append(", condition: ");
    result.append(condition);
    result.append(", comment: ");
    result.append(comment);
    result.append(')');
    return result.toString();
  }

} //MappingRuleImpl

/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mapping.mapping.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mapping.mapping.MappingModel;
import org.xtext.example.mapping.mapping.MappingPackage;
import org.xtext.example.mapping.mapping.MappingRule;
import org.xtext.example.mapping.mapping.SourceMetamodel;
import org.xtext.example.mapping.mapping.TargetMetamodel;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mapping.mapping.impl.MappingModelImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.mapping.mapping.impl.MappingModelImpl#getSourceMetamodels <em>Source Metamodels</em>}</li>
 *   <li>{@link org.xtext.example.mapping.mapping.impl.MappingModelImpl#getMainSourceMetamodel <em>Main Source Metamodel</em>}</li>
 *   <li>{@link org.xtext.example.mapping.mapping.impl.MappingModelImpl#getTargetMetamodels <em>Target Metamodels</em>}</li>
 *   <li>{@link org.xtext.example.mapping.mapping.impl.MappingModelImpl#getRules <em>Rules</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MappingModelImpl extends MinimalEObjectImpl.Container implements MappingModel
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getSourceMetamodels() <em>Source Metamodels</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSourceMetamodels()
   * @generated
   * @ordered
   */
  protected EList<SourceMetamodel> sourceMetamodels;

  /**
   * The cached value of the '{@link #getMainSourceMetamodel() <em>Main Source Metamodel</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMainSourceMetamodel()
   * @generated
   * @ordered
   */
  protected SourceMetamodel mainSourceMetamodel;

  /**
   * The cached value of the '{@link #getTargetMetamodels() <em>Target Metamodels</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTargetMetamodels()
   * @generated
   * @ordered
   */
  protected EList<TargetMetamodel> targetMetamodels;

  /**
   * The cached value of the '{@link #getRules() <em>Rules</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRules()
   * @generated
   * @ordered
   */
  protected EList<MappingRule> rules;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MappingModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MappingPackage.Literals.MAPPING_MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingPackage.MAPPING_MODEL__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<SourceMetamodel> getSourceMetamodels()
  {
    if (sourceMetamodels == null)
    {
      sourceMetamodels = new EObjectContainmentEList<SourceMetamodel>(SourceMetamodel.class, this, MappingPackage.MAPPING_MODEL__SOURCE_METAMODELS);
    }
    return sourceMetamodels;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SourceMetamodel getMainSourceMetamodel()
  {
    if (mainSourceMetamodel != null && mainSourceMetamodel.eIsProxy())
    {
      InternalEObject oldMainSourceMetamodel = (InternalEObject)mainSourceMetamodel;
      mainSourceMetamodel = (SourceMetamodel)eResolveProxy(oldMainSourceMetamodel);
      if (mainSourceMetamodel != oldMainSourceMetamodel)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MappingPackage.MAPPING_MODEL__MAIN_SOURCE_METAMODEL, oldMainSourceMetamodel, mainSourceMetamodel));
      }
    }
    return mainSourceMetamodel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SourceMetamodel basicGetMainSourceMetamodel()
  {
    return mainSourceMetamodel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMainSourceMetamodel(SourceMetamodel newMainSourceMetamodel)
  {
    SourceMetamodel oldMainSourceMetamodel = mainSourceMetamodel;
    mainSourceMetamodel = newMainSourceMetamodel;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingPackage.MAPPING_MODEL__MAIN_SOURCE_METAMODEL, oldMainSourceMetamodel, mainSourceMetamodel));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<TargetMetamodel> getTargetMetamodels()
  {
    if (targetMetamodels == null)
    {
      targetMetamodels = new EObjectContainmentEList<TargetMetamodel>(TargetMetamodel.class, this, MappingPackage.MAPPING_MODEL__TARGET_METAMODELS);
    }
    return targetMetamodels;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<MappingRule> getRules()
  {
    if (rules == null)
    {
      rules = new EObjectContainmentEList<MappingRule>(MappingRule.class, this, MappingPackage.MAPPING_MODEL__RULES);
    }
    return rules;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MappingPackage.MAPPING_MODEL__SOURCE_METAMODELS:
        return ((InternalEList<?>)getSourceMetamodels()).basicRemove(otherEnd, msgs);
      case MappingPackage.MAPPING_MODEL__TARGET_METAMODELS:
        return ((InternalEList<?>)getTargetMetamodels()).basicRemove(otherEnd, msgs);
      case MappingPackage.MAPPING_MODEL__RULES:
        return ((InternalEList<?>)getRules()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MappingPackage.MAPPING_MODEL__NAME:
        return getName();
      case MappingPackage.MAPPING_MODEL__SOURCE_METAMODELS:
        return getSourceMetamodels();
      case MappingPackage.MAPPING_MODEL__MAIN_SOURCE_METAMODEL:
        if (resolve) return getMainSourceMetamodel();
        return basicGetMainSourceMetamodel();
      case MappingPackage.MAPPING_MODEL__TARGET_METAMODELS:
        return getTargetMetamodels();
      case MappingPackage.MAPPING_MODEL__RULES:
        return getRules();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MappingPackage.MAPPING_MODEL__NAME:
        setName((String)newValue);
        return;
      case MappingPackage.MAPPING_MODEL__SOURCE_METAMODELS:
        getSourceMetamodels().clear();
        getSourceMetamodels().addAll((Collection<? extends SourceMetamodel>)newValue);
        return;
      case MappingPackage.MAPPING_MODEL__MAIN_SOURCE_METAMODEL:
        setMainSourceMetamodel((SourceMetamodel)newValue);
        return;
      case MappingPackage.MAPPING_MODEL__TARGET_METAMODELS:
        getTargetMetamodels().clear();
        getTargetMetamodels().addAll((Collection<? extends TargetMetamodel>)newValue);
        return;
      case MappingPackage.MAPPING_MODEL__RULES:
        getRules().clear();
        getRules().addAll((Collection<? extends MappingRule>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MappingPackage.MAPPING_MODEL__NAME:
        setName(NAME_EDEFAULT);
        return;
      case MappingPackage.MAPPING_MODEL__SOURCE_METAMODELS:
        getSourceMetamodels().clear();
        return;
      case MappingPackage.MAPPING_MODEL__MAIN_SOURCE_METAMODEL:
        setMainSourceMetamodel((SourceMetamodel)null);
        return;
      case MappingPackage.MAPPING_MODEL__TARGET_METAMODELS:
        getTargetMetamodels().clear();
        return;
      case MappingPackage.MAPPING_MODEL__RULES:
        getRules().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MappingPackage.MAPPING_MODEL__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case MappingPackage.MAPPING_MODEL__SOURCE_METAMODELS:
        return sourceMetamodels != null && !sourceMetamodels.isEmpty();
      case MappingPackage.MAPPING_MODEL__MAIN_SOURCE_METAMODEL:
        return mainSourceMetamodel != null;
      case MappingPackage.MAPPING_MODEL__TARGET_METAMODELS:
        return targetMetamodels != null && !targetMetamodels.isEmpty();
      case MappingPackage.MAPPING_MODEL__RULES:
        return rules != null && !rules.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //MappingModelImpl

/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mapping.scoping;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EEnumLiteral;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.ENamedElement;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.xtext.example.mapping.mapping.MappingModel;
import org.xtext.example.mapping.mapping.MappingPackage;
import org.xtext.example.mapping.mapping.MappingRule;
import org.xtext.example.mapping.mapping.Metamodel;
import org.xtext.example.mapping.mapping.SourceMetamodel;
import org.xtext.example.mapping.mapping.TargetMetamodel;

import com.google.common.base.Function;



/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */


public class MappingScopeProvider extends AbstractMappingScopeProvider {
	
	@Override
	public IScope getScope(EObject context, EReference reference) {
	    
	   if (reference == MappingPackage.Literals.MAPPING_RULE__EENUM_LITERAL) {
	        MappingModel rootMappingModel = (MappingModel) EcoreUtil2.getRootContainer(context);
	        List<TargetMetamodel> targetMetamodelsArray = new ArrayList<>();
	       targetMetamodelsArray = rootMappingModel.getTargetMetamodels();
	       List<EPackage> sourcePackages = new ArrayList<>();
	       for (int iterator = 0 ; iterator< targetMetamodelsArray.size() ; iterator++) {
	    	   sourcePackages.add(targetMetamodelsArray.get(iterator).getModel());
	       }
	       
	       List<EObject> contents = new ArrayList<>();
	       List<EEnumLiteral> literals = new ArrayList<>();
	          for (int sourcePackageIterator = 0; sourcePackageIterator < sourcePackages.size() ; sourcePackageIterator++) {
	    	  EPackage pako = (EPackage)sourcePackages.get(sourcePackageIterator);
	          contents = pako.eContents();
	       
	          for (EObject iterator : contents) {
	        	  if (iterator.eClass().getName() == "EEnum") {
	        		  EEnum numi = (EEnum)iterator;
	        		  
	        	
	        		  EObject sourci = ((MappingRule)context).getSource();
	        	
                      literals = ((EEnum)sourci).getELiterals();
	        		     	
	        	  }        	  
	          }
	       }
	          Function<EObject, QualifiedName> nameComputation = (EObject e) -> {
	       	   
		    	   if (e instanceof EEnumLiteral)
		    	   {		  
		    		 EEnumLiteral en = (EEnumLiteral) e;
		            
		    	      return QualifiedName.create(en.getName());
		    	   }
    	
		    	   return QualifiedName.create(((EEnumLiteral)e).getName());    
		       };
		       return Scopes.scopeFor(literals, nameComputation, IScope.NULLSCOPE); 
	   }
	 
	   return super.getScope(context, reference);
}
}
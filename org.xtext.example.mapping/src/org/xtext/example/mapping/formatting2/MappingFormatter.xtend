/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mapping.formatting2

import com.google.inject.Inject

import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.xtext.example.mapping.mapping.MappingModel
import org.xtext.example.mapping.mapping.MappingRule
import org.xtext.example.mapping.services.MappingGrammarAccess
import org.xtext.example.mapping.mapping.HelperStatement

class MappingFormatter extends AbstractFormatter2 {
	
	@Inject extension MappingGrammarAccess

	def dispatch void format(MappingModel mappingModel, extension IFormattableDocument document) {
		mappingModel.regionFor.keyword("SourceMetamodels").prepend[newLine]
		mappingModel.regionFor.keyword("TargetMetamodels").prepend[newLine]
		mappingModel.regionFor.keyword("MappingRules").prepend[newLine]

		val begin = mappingModel.regionFor.keywords('{').get(2)
		val end = mappingModel.regionFor.keywords('}').get(2)
		begin.append[newLine]
		end.prepend[newLine]
		interior(begin, end)[indent]
		for (mr : mappingModel.rules) {
			mr.format
		}
	}

	def dispatch void format(MappingRule mappingRule, extension IFormattableDocument document) {
		mappingRule.regionFor.keyword('source').prepend[newLine]
		if (mappingRule.source === null) {
			mappingRule.regionFor.keyword('target').prepend[newLine]
		}
		mappingRule.regionFor.keyword('condition').prepend[newLine]
		if (mappingRule.operator === null) {
			mappingRule.regionFor.keyword('condition').prepend[newLine]
		}
		val begin = mappingRule.regionFor.keyword("{")
		val end = mappingRule.regionFor.keyword("}")
		//begin.append[newLine]
		end.prepend[newLine]
		interior(begin, end)[indent]

		for (submr : mappingRule.childRules) {
			submr.format
		}
		for (hs : mappingRule.childHelpers) {
			hs.format
		}
	}

	def dispatch void format(HelperStatement helper, extension IFormattableDocument document) {
		helper.regionFor.keyword('statement').prepend[newLine]
		val begin = helper.regionFor.keyword("{")
		val end = helper.regionFor.keyword("}")
		//begin.append[newLine]
		end.prepend[newLine]
		interior(begin, end)[indent]
		for (helperRule : helper.childHelpers) {
			helperRule.format
		}
		for (childRule : helper.childRules) {
			childRule.format
		}
	}
}
